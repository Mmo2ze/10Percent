@page "/category/{CategoryId:int}"
@using _10PercentSys.Models
@using _10PercentSys.Services
@inject LocalDbService DbService
@inject NavigationManager Navigation

<h1>Manage Products - @currentCategory?.Name</h1>

@if (currentCategory == null)
{
    <p>Loading...</p>
}
else
{
    
    <div class="product-form">
        <h3>@(editProductMode ? "Edit Product" : "Add New Product")</h3>

        <div class="form-switch mb-3">
            @if (editProductMode)
            {
                
                <input type="checkbox" class="form-check-input" @bind= "currentProduct.HaveSizes"
                       id="haveSizesToggle"/>
                <label class="form-check-label" for="haveSizesToggle">
                Product has different sizes
            </label>
            }
            else
            {
                <input type="checkbox" class="form-check-input" @bind="productHaveSizes"
                       id="haveSizesToggle"/>
            }
        </div>

        <input @bind="currentProduct.Name"
               placeholder="Product name"
               class="form-control mb-2"/>


    
        @if (editProductMode && currentProduct.HaveSizes || !editProductMode && productHaveSizes)
        {
            <div class="price-inputs">
                <h5>Size Prices (At least 2 required)</h5>
                @foreach (var size in Enum.GetValues<Size>().Where(x=>x!= Size.None))
                {
                    <div class="price-input mb-2">
                        <label>@size Price:</label>
                        <input type="number"
                               step="0.01"
                               @bind="currentPrices[size]"
                               class="form-control"/>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="normal-price-input">
                <h5>Standard Price</h5>
                <input type="number"
                       step="0.01"
                       @bind="currentProduct.NormalPrice"
                       class="form-control mb-3"/>
            </div>
        }

        <div class="button-group">
            <button @onclick="SaveProduct" class="btn btn-primary">
                @(editProductMode ? "Update" : "Add")
            </button>
            @if (editProductMode)
            {
                <button @onclick="CancelEditProduct" class="btn btn-secondary">Cancel</button>
            }
        </div>
    </div>
    <div class="product-list">
        <h3>Products in Category</h3>
        @if (products?.Any() != true)
        {
            <p>No products found</p>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Prices</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@product.Name</td>
                        <td>
                            @if (product.HaveSizes)
                                @foreach (var price in product.Prices.Where(price => price.Value > 0))
                            {
                                <span class="price-badge">
                                    @price.Key: @price.Value.ToString("C")
                                </span>
                            }
                            else
                            {
                                <span class="price-badge">
                                     @product.NormalPrice.ToString("C")
                                </span>
                            }
                        </td>
                        <td>
                            <button @onclick="@(() => EditProduct(product))"
                                    class="btn btn-sm btn-warning">
                                Edit
                            </button>
                            <button @onclick="@(() => DeleteProduct(product.Id))"
                                    class="btn btn-sm btn-danger">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
}

@code {
    [Parameter] public int CategoryId { get; set; }

    public bool productHaveSizes { get; set; } = false;
    
    private Category currentCategory;
    private List<Product> products = new();
    private Product currentProduct = new();
    private Dictionary<Size, decimal> currentPrices = new();
    private bool editProductMode;

    protected override async Task OnParametersSetAsync()
    {
        currentCategory = await DbService.GetCategoryAsync(CategoryId);
        products = await DbService.GetProductsByCategoryAsync(CategoryId);
        currentPrices = Enum.GetValues<Size>().ToDictionary(s => s, s => 0m);
    }

    private async Task SaveProduct()
    {
        if (editProductMode && currentProduct.HaveSizes || !editProductMode && productHaveSizes)
        {
            // Validate at least 2 sizes have prices
            currentProduct.HaveSizes = true;
            var validPrices = currentPrices.Count(p => p.Value > 0);
            if (validPrices < 2)
            {
                // Show error
                return;
            }

            currentProduct.SetPrices(currentPrices);
            currentProduct.NormalPrice = 0; // Clear normal price
        }
        else
        {
            if (currentProduct.NormalPrice <= 0)
            {
                // Show error
                return;
            }

            // Clear size prices
            currentProduct.PricesString = string.Empty;
        }

        currentProduct.CategoryId = CategoryId;
        currentProduct.SetPrices(currentPrices);

        if (editProductMode)
        {
            await DbService.UpdateProductAsync(currentProduct);
        }
        else
        {
            await DbService.CreateProductAsync(currentProduct);
        }

        ResetProductForm();
        products = await DbService.GetProductsByCategoryAsync(CategoryId);
    }

    private void EditProduct(Product product)
    {
        currentProduct = product;
        editProductMode = true;

        if (product.HaveSizes)
        {
            currentPrices = product.Prices;
        }
        else
        {
            currentProduct.NormalPrice = product.NormalPrice;
        }
    }

    private void CancelEditProduct()
    {
        ResetProductForm();
    }

    private async Task DeleteProduct(int productId)
    {
        await DbService.DeleteProductAsync(productId);
        products = await DbService.GetProductsByCategoryAsync(CategoryId);
    }

    private void ResetProductForm()
    {
        currentProduct = new Product();
        currentPrices = Enum.GetValues<Size>().ToDictionary(s => s, s => 0m);
        editProductMode = false;
    }

}