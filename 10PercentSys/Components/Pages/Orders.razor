@page "/orders"
@using _10PercentSys.Models
@using _10PercentSys.Services
@inject LocalDbService DbService

<div class="container mt-4">
    <h1 class="mb-4">☕ Order History</h1>

    <!-- Filter Controls -->
    <div class="row mb-4 g-3 filter-section">
        <div class="col-md-3">
            <label class="form-label"><i class="bi bi-calendar2-range"></i> Start Date</label>
            <input type="datetime-local" class="form-control" @bind="startDate" />
        </div>
        <div class="col-md-3">
            <label class="form-label"><i class="bi bi-calendar2-check"></i> End Date</label>
            <input type="datetime-local" class="form-control" @bind="endDate" />
        </div>
        <div class="col-md-6 d-flex align-items-end gap-2">
            <button class="btn btn-primary" @onclick="LoadOrders">
                <i class="bi bi-cup-straw"></i> Filter Orders
            </button>
            <button class="btn btn-outline-secondary" @onclick="ResetDates">
                <i class="bi bi-arrow-repeat"></i> Reset
            </button>
        </div>
        <button class="btn btn-outline-secondary" @onclick="PrintSummary">
            <i class="bi bi-arrow-repeat"></i> PrintSummary
        </button>
    </div>

    <!-- Order Cards -->
    @if (_orders?.Any() == true)
    {
        <div class="alert alert-success mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h5 class="mb-0"><i class="bi bi-list-check"></i> @_orders.Count Orders Found</h5>
                    <small class="text-muted">
                        From @startDate.ToString("MMM dd, h:mm tt") to @endDate.ToString("MMM dd, h:mm tt")
                    </small>
                </div>
                <div class="text-end">
                    <h4 class="mb-0">Total Revenue</h4>
                    <h2 class="mb-0">@grandTotal.ToString("C")</h2>
                </div>
            </div>
        </div>

        <div class="row g-4">
            @foreach (var order in _orders)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card h-100">
                        <div class="card-header text-white d-flex justify-content-between">
                            <div>
                                <h5 class="card-title mb-0">📋 Order #@order.Id</h5>
                                <small class="opacity-75">@order.Date.ToString("MMM dd, h:mm tt")</small>
                            </div>
                            <div>
                                <button @onclick="@(() => PrintOrder(order))" class="card-title mb-0">🖨Print</button>
                            </div>
                            <div class="badge">
                                @order.Total.ToString("C")
                            </div>
                        </div>

                        <div class="card-body">
                            <div class="order-details">
                                @foreach (var item in order.OrderProducts)
                                {
                                    <div class="order-item">
                                        <div class="d-flex justify-content-between">
                                            <span>@item.NameWithSize</span>
                                            <span class="text-muted">x@(item.Quantity)</span>
                                        </div>
                                        <div class="d-flex justify-content-between small">
                                            <span>@item.Price.ToString("C")</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>


                    </div>
                </div>
            }
        </div>
    }
</div>
@code {
    private List<Order>? _orders;
    private DateTime endDate = DateTime.Now;
    private DateTime startDate = DateTime.Now.AddHours(9 - DateTime.Now.Hour).AddMinutes(0 - DateTime.Now.Minute);
    private decimal grandTotal;
    private ReceiptService _receiptService = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        // Swap dates if start is after end
        if (startDate > endDate)
        {
            (endDate, startDate) = (startDate, endDate);
        }

        _orders = await DbService.GetOrdersByDateAsync(startDate, endDate);

        if (_orders != null)
        {
            foreach (var order in _orders)
            {
                var orderItems = await DbService.GetOrderItemsAsyncByOrderId(order.Id);
                order.OrderProducts = orderItems;
            }
            grandTotal = _orders.Sum(o => o.Total);
        }
        else
        {
            grandTotal = 0;
        }
    }

    private async Task ResetDates()
    {
        startDate = DateTime.Now.AddDays(-7);
        endDate = DateTime.Now;
        await LoadOrders();
    }

    private Task PrintOrder(Order order)
    {
        _receiptService.PrintReceipt(order);
        return Task.CompletedTask;
    }

    private void PrintSummary()
    {
        _receiptService.PrintSummary(_orders, startDate, endDate, grandTotal);
    }

}
}